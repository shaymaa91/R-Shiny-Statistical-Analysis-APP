shiny::runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('C:/Users/Waiam/Downloads/inferencial_app.R')
## Data
x=c(2,3,5,7,9,10,11,14,7,8,9,12,14,16, 18)
y=c(5,7,8,9,12,14,16,20, 12,14,16,20,21,23,20)
t.test(x=x,y=y, var.equal = TRUE,  mu = 0, alternative = "two.sided", conf.level = 0.95) # Parametric
wilcox.test(x=x,y=y,  m = 0, alternative = "two.sided", conf.level = 0.95, conf.int=TRUE, exact = FALSE) # Non-Parametric
t.test(x=x,y=y, mu=0, alternative = "two.sided", conf.level = 0.95, paired = TRUE) # Parametric
wilcox.test(x=x,y=y,  m = 0, alternative = "two.sided", conf.level = 0.95, conf.int=TRUE, exact = FALSE, paired = TRUE) # Non-Parametric
var.test(x = x, y = y, ratio = 1, alternative = "two.sided", conf.level = 0.95) # Parametric F test
mood.test(x = x, y = y, alternative = "two.sided",conf.level = 0.95, conf.int=TRUE, exact = FALSE) # Non-Parametric Mood test
prop.test(x = c(5,10), n = c(50, 80),  alternative = "two.sided", conf.level = 0.95) # approximation
runApp('C:/Users/Waiam/Downloads/InferenceII proportion not working yet.r')
shiny::runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
runApp('C:/Users/Waiam/Downloads/Inference II working suessfully - Shaymaa.r')
runApp('C:/Users/Waiam/Downloads/Inference II working suessfully - Shaymaa.r')
runApp('C:/Users/Waiam/Downloads/Inference II working suessfully - Shaymaa.r')
shiny::runApp('STAT503')
runApp('STAT503')
runApp('STAT503')
library(shiny); runApp('C:/Users/Waiam/OneDrive - KFUPM/242/inference 2 -  last update.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='fwks', token='E834C19517F7408FE8AA567429AB4FDD', secret='I1InW+dDjozAPAdcXSuERHphok30D+BPbV7naqXp')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('//Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503/app.R')
rlang::last_trace()
rsconnect::deployApp('"C:/Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503/app.R"')
rsconnect::deployApp('C:/Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503/app.R')
rsconnect::deployApp("C:/Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503/app.R")
rsconnect::deployApp("C:/Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503")
shiny::runApp('STAT503')
runApp('STAT503')
data(abbey)
# 1) Using data()
data(package = "datasets")
# â†’ shows a table; to extract just the names:
data(package = "datasets")$results[, "Item"]
data()
data(package = .packages(all.available = TRUE))
data(Abbey)
library(BSDA)
data(Abbey)
head(Abbey)
summary(Abbey)
shiny::runApp('STAT503')
runApp('STAT503')
library(rsconnect)
rsconnect::setAccountInfo(name='fwks', token='E834C19517F7408FE8AA567429AB4FDD', secret='I1InW+dDjozAPAdcXSuERHphok30D+BPbV7naqXp')
library(rsconnect)
rsconnect::deployApp("C:/Users/FAB/iCloudDrive/KFUPM/2/STAT503/R shiny/R Shiny - STAT503_final/R Shiny - STAT503/STAT503")
